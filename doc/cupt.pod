=pod

=head1 NAME

cupt - console package management tool

=head1 SYNOPSIS

cupt [ I<option>... ] I<action> [ { I<parameter> | I<option> } ... ]

=head1 ACTIONS

=head2 Query actions

=over

=item config-dump

prints all configuration variables to standard output

=item show

prints version info of specified packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --all-versions

print all versions of the package, not selected one

Corresponding configuration variable: L<apt::cache::allversions>

=item --with-release-info

also print information about release info where the version of the package live

=back

Examples:

C<cupt show qmmp>

C<cupt show --all-versions qmmp debianutils>

C<cupt show --with-release-info audacious/testing apt debianutils=2.3.38>

=item search

searches for packages that contains some string within package names and package descriptions

This subcommand receives a list a Perl-compatible Regular Expressions (PCRE) to
search. Only those packages will be printed that contain all of specified
patterns.

Specific options:

=over

=item --case-sensitive

search case-sensitively

=item --names-only,-n

search only in package names

Corresponding configuration variable: L<apt::cache::namesonly>

=back

Examples:

C<cupt search nvidia driver>

C<cupt search --case-sensitive Vim>

C<cupt search -n vim>

C<cupt search "package manager">

=item depends

prints dependency relation expressions for given version of package

By default prints 'Pre-Depends', 'Depends' and 'Recommends' for the version.

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --important

don't take 'Recommends' dependencies into account

Corresponding configuration variable: L<apt::cache::important>

=item --with-suggests

take also 'Suggests' dependencies into account

=item --recurse

process the dependencies recursively

Corresponding configuration variable: L<apt::cache::recursedepends>

=back

Examples:

C<cupt depends nlkt perl/stable>

C<cupt depends --important xserver-xorg-core>

C<cupt depends --recurse xmlto>

=item rdepends

same as L<depends>, but prints reverse relations instead of forward ones

=item policy

prints available versions with pins and release info for each package name

This subcommand receives the list of package names.

Examples:

C<cupt policy dpkg>

C<cupt policy libpqxx-2.6.9ldbl libpqxx-3.0>

=item pkgnames

prints package names that start with a supplied suffix

If no suffix is given, prints all package names

Examples:

C<cupt pkgnames>

C<cupt pkgnames liba>

=back

=head2 Management actions

=over

=item install

installs, upgrades or downgrades specified packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

If some version of package was already installed, this command will
upgrade/downgrade it; otherwise, the package will be freshly installed.

Examples:

C<cupt install nlkt>

C<cupt install devscripts xserver-xorg/experimental xfce4-mixer=4.6.0-2>

=item remove

removes specified packages

This subcommand receives the list of package names.

Examples:

C<cupt remove nlkt>

C<cupt remove devscripts kde4-minimal>

=back

=head3 management-specific options

=over

=item --resolver=

string, determines type of resolver: can be

=over

=item first-good

most stupid resolver. At each problem situation, chooses the best solution for
this situation. No lookings ahead. Works pretty good for simple install requests and
for one-repository system.

=item multiline-fair

medium-class resolver. It chooses best possible solution (by overall score)
each time. This is a default resolver.

=item multiline-full

full resolver. Guaranteed to suggest solution in precise order from the best to
the worst result score (by the resolver's opinion). Latter means that resolver
builds full resolve tree before suggesting the solutions, which means large RAM
and speed penalties. Use it with caution.

=back

=item --max-solution-count=

number, determines how many maximum solutions will resolver store in memory. This
option prevents large memory grows by purging away solutions with worst scores.
Defaults to 256.  Note that very complex requests or requests on
multi-repository system will increase size of solution tree dramatically, so
prepare to play with increasing this option accordingly.

=item --no-install-recommends,-R

cupt installs recommended packages by default, this option cancels described behavior

Corresponding configuration option: L<apt::install-recommends>

=item --show-versions,-V

when displaying actions preview prompt, display also versions of packages

=back

=head3 management modifiers

TODO

=head1 EXPRESSIONS

This section documents some common expressions used by actions.

=head2 Binary package version expression

I<package_name>[I<modifier>]

selects one version of given binary package.

Possible modifiers:

=over

=item <none>

selects L<policy version|/"Policy version"> of the package

Example: C<audacious>.

=item =<version string>

selects specified version of the package

Example: C<audacious=1.5.1-2>

=item /<distribution>

selects a version from specified distribution (archive name or codename)

Examples: C<audacious/lenny> (by codename), C<audacious/stable> (by archive name)

=item /installed

selects installed version of the package

Example: C<audacious/installed>

=back

=head1 COMMON OPTIONS

=over

=item --option=,-o

sets specified configuration option, syntax: "<name>=<value>"

Example: C<cupt remove nlkt -o 'cupt::resolver::keep-recommends=0'>

=item --purge

when removing packages, also delete their configuration files

Corresponding configuration option: L<cupt::worker::purge>

=item TODO

=back

=head1 DEFINITIONS

TODO

=cut

