=pod

=head1 NAME

cupt - console package management tool

=head1 SYNOPSIS

cupt [ I<option>... ] I<action> [ { I<parameter> | I<option> } ... ]

=head1 ACTIONS

=head2 Query actions

=over

=item config-dump

If invoked without arguments, prints all configuration variables to standard
output.

If one argument is supplied, it is treaten as a configuration option and only
the value of this option is printed (empty string in case of undefined value).
Note that only scalar (non-list) options can be retrieved in this mode.

Examples:

C<cupt config-dump>

C<cupt config-dump acquire::http::timeout>

=item show

prints version info of specified binary packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --all-versions,-a

print all versions of the package, not selected one

Corresponding configuration variable: L<apt::cache::allversions>

=item --no-all-versions

don't print all versions of the package, use only selected one

Corresponding configuration variable: L<apt::cache::allversions>

=item --with-release-info

also print information about release info where the version of the package live

=back

Examples:

C<cupt show qmmp>

C<cupt show --all-versions qmmp debianutils>

C<cupt show --with-release-info audacious/testing apt debianutils=2.3.38>

=item showsrc

The same as L<show>, only for source packages.

Examples:

C<cupt showsrc --all-versions qmmp>

C<cupt showsrc --with-release-info audacious/testing apt>

C<cupt showsrc libxine1>

=item search

searches for packages that contains some string within package names and package descriptions

This subcommand receives a list a Perl-compatible Regular Expressions (PCRE) to
search. Only those packages will be printed that contain all of specified
patterns.

Specific options:

=over

=item --case-sensitive

search case-sensitively

=item --names-only,-n

search only in package names

Corresponding configuration variable: L<apt::cache::namesonly>

=back

Examples:

C<cupt search nvidia driver>

C<cupt search --case-sensitive Vim>

C<cupt search -n vim>

C<cupt search "package manager">

=item depends

prints dependency relation expressions for given version of package

By default prints 'Pre-Depends', 'Depends' and 'Recommends' for the version.

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --with-suggests

take also 'Suggests' dependencies into account

=item --recurse

process the dependencies recursively

Corresponding configuration variable: L<apt::cache::recursedepends>

=back

Examples:

C<cupt depends nlkt perl/stable>

C<cupt depends --important xserver-xorg-core>

C<cupt depends --recurse xmlto>

=item rdepends

same as L<depends>, but prints reverse relations instead of forward ones

=item policy

prints available versions with pins and release info for each binary package name

This subcommand receives the list of package names.

Examples:

C<cupt policy dpkg>

C<cupt policy libpqxx-2.6.9ldbl libpqxx-3.0>

=item policysrc

prints available versions with pins and release info for each source package name

This subcommand receives the list of package names.

Examples:

C<cupt policy dpkg>

C<cupt policy libpqxx libpqxx3>

=item pkgnames

prints package names that start with a supplied suffix

If no suffix is given, prints all package names

Examples:

C<cupt pkgnames>

C<cupt pkgnames liba>

=item changelog

displays changelog for given versions of packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Works only with installed packages and official Debian and Ubuntu repositories.

Examples:

C<cupt changelog dpkg/installed>

C<cupt changelog --installed-only dpkg nlkt lintian>

C<cupt changelog libqtcore4>

=item copyright

displays copyright for given versions of packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Works only with installed packages and official Debian and Ubuntu repositories.

Examples:

C<cupt copyright dpkg/installed>

C<cupt copyright --installed-only dpkg nlkt lintian>

C<cupt copyright libqtcore4>

=item screenshots

open a browser window/tab with screenshots of given packages.

This subcommand receives list of package names.

Example:

C<cupt screenshots arora>

=back

=head3 query-specific options

=over

=item --important,-i

don't take 'Recommends' dependencies into account

Corresponding configuration variable: L<apt::cache::important>

=item --installed-only

work only with installed versions of packages; valuable only for L</show>,
L</depends>, L</rdepends>, L</search>, L</pkgnames>, L</changelog> actions

=back

=head2 Management actions

=over

=item update

updates package indexes

This subcommand receives no arguments.

Example:

C<cupt update>

=item install

installs, upgrades or downgrades specified packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

If some version of package was already installed, this command will
upgrade/downgrade it; otherwise, the package will be freshly installed.

Examples:

C<cupt install nlkt>

C<cupt install devscripts xserver-xorg/experimental xfce4-mixer=4.6.0-2>

=item remove

removes specified packages

This subcommand receives the list of package names.

Examples:

C<cupt remove nlkt>

C<cupt remove devscripts kde4-minimal>

=item full-upgrade

performs as more upgrades of the installed packages as possible, the
recommended way to do upgrades

This subcommand is usually invoked without any further parameters:

C<cupt full-upgrade>

List of L</"Binary package version expression">'s can be however specified as additional parameters.

Example: the command C<cupt full-upgrade xserver-xorg/installed> will try to upgrade
your system, however preserving package 'xserver-xorg' to be sticked with
currently installed version.

=item safe-upgrade

the same as L<full-upgrade>, but with the change that problem resolver won't
try to remove non-automatically installed packages in order to upgrade more
packages, equivalent of 'full-upgrade --no-remove'.

=item markauto

marks specified packages as automatically installed

This subcommand receives the list of package names.

Examples:

C<cupt markauto libstreamanalyzer0>

C<cupt markauto lsof gimp-data>

=item unmarkauto

marks specified packages as manually installed

This subcommand receives the list of package names.

Examples:

C<cupt unmarkauto kpogre>

C<cupt unmarkauto dpkg-dev>

=item satisfy

performs all needed operations to satisfy list of specified relations

This subcommand receives the list of relations or relation lines. Relation and
relation lines has the same syntax as defined in Debian Policy ยง7.1.

Examples:

C<< cupt satisfy "kmail (>= 4:4.2)" >>

C<< cupt satisfy "xserver-xorg (>> 1.6)" "xserver-common (<< 1.6.1~)" >>

C<< cupt satisfy "nautilus (>= 2.16.0), libnautilus-extension1 (>= 2.16.0), wget (>= 1.10.0)" >>

=item build-dep

performs all needed operations to satisfy list of build-dependencies of
specified source packages

This subcommand receives the list of L</Source package version expression>'s.

Examples:

C<< cupt build-dep qt4-x11 >>

C<< cupt build-dep unetbootin/unstable libcdio/experimental >>

=item source

fetches Debian source files needed to build a Debian binary package

This subcommand receives the list of L</Source package version expression>'s.

Parameters:

=over

=item --tar-only

download only original tarball

=item --diff-only

download only Debian diff

=item --dsc-only

download only Debian dsc

=item --download-only

don't unpack downloaded source files

=back

Examples:

C<< cupt source libsort-fields-perl >>

C<< cupt source --diff-only libpqxx cupt/unstable >>

C<< cupt source libxine1 >>

=item clean

removes all deb archives from cache on disk

This subcommand receives no arguments.

Example: C<cupt clean>

=item autoclean

removes deb archives which are not available in package indexes from cache
on disk

This subcommand receives no arguments.

Example: C<cupt autoclean>

=back

=head3 query-specific options

=over

=item --no-remove

disallow problem resolver to remove manually installed packages. Packages that are marked to remove/purge in the command line will be remove/purged as usual.

Corresponding configuration option: L<cupt::resolver::no-remove>

=item --no-auto-remove

don't try to remove automatically installed packages after doing requested
actions

Corresponding configuration option: L<cupt::resolver::auto-remove>

=item --simulate,-s

don't modify anything in the system, just print supposed actions

Doesn't require root privileges.

Corresponding configuration option: L<cupt::worker::simulate>

=item --resolver=

string, determines type of resolver: can be

=over

=item fair

medium-class resolver. It chooses best possible solution (by overall score)
each time. This is a default resolver.

=item full

full resolver. Guaranteed to suggest solution in precise order from the best to
the worst result score (by the resolver's opinion). Latter means that resolver
builds full resolve tree before suggesting the solutions, which means large RAM
and speed penalties. Use it with caution.

=back

Corresponding configuration option: L<cupt::resolver::type>

=item --max-solution-count=

number, determines how many maximum solutions will resolver store in memory. This
option prevents large memory grows by purging away solutions with worst scores.
Defaults to 256.  Note that very complex requests or requests on
multi-repository system will increase size of solution tree dramatically, so
prepare to play with increasing this option accordingly.

Corresponding configuration option: L<cupt::resolver::max-solution-count>

=item --no-install-recommends,-R

cupt installs recommended packages by default, this option cancels described behavior

Corresponding configuration option: L<apt::install-recommends>

=item --show-versions,-V

when displaying actions preview prompt, display also versions of packages

=item --show-size-changes,-Z

when displaying actions preview prompt, display also changes in disk space
usage for each package

=item --show-reasons,--show-deps,-D

when displaying actions preview prompt, display also reasons why this action was
considered to perform

Corresponding configuration option: L<cupt::resolver::track-reasons>

=item --no-install-unpacked

By default cupt will implicitly install all already unpacked packages, this is
needed, for example, for proper continue of interrupted upgrades. This option
cancels behavior described.

=item --download-only,-d

stop after download stage, don't modify the system; not applicable for
L</markauto> and L</markauto> actions

Corresponding configuration option: L<cupt::worker::download-only>

=back

=head3 management modifiers

=over

=item -

remove the package, can be used in non-remove actions

Examples:

C<cupt install kde4 icewm-> - install the package
'kde4' and remove the package 'icewm' simultaneously.

C<cupt full-upgrade iceweasel- icedove-> - upgrade the system, deleting iceweasel and icedove

=item +

install the package, can be used in remove actions

Examples:

C<cupt remove kde konqueror+> - remove kde, but install/upgrade konqueror

C<cupt remove kde konqueror/installed+> - remove kde, but leave konqueror

=back

=head1 EXPRESSIONS

This section documents some common expressions used by actions.

=head2 Binary package version expression

I<package_name>[I<modifier>]

selects one version of given binary package.

Possible modifiers:

=over

=item <none>

selects L<policy version|/"Policy version"> of the package

Example: C<audacious>.

=item =<version string>

selects specified version of the package

Example: C<audacious=1.5.1-2>

=item /<distribution>

selects a version from specified distribution (archive name or codename)

Examples: C<audacious/lenny> (by codename), C<audacious/stable> (by archive name)

=item /installed

selects installed version of the package

Example: C<audacious/installed>

=back

=head2 Source package version expression

I<package_name>[I<modifier>]

selects one version of given source package.

Possible modifiers are identical to those defined in L</Binary package version
expression>, except for '/installed'.

Also, you can specify L</Binary package version expression> as
L</Source package version expression>, then binary-to-source mapping
will be performed.

=head1 COMMON OPTIONS

=over

=item --option=,-o

sets specified configuration option, syntax: "<name>=<value>"

Examples:

C<cupt remove nlkt -o 'cupt::resolver::keep-recommends=0'> (regular option)

C<cupt remove nlkt -o 'apt::neverautoremove::=libcanberra0> (list option)

=item --target-release=,--default-release=,-t

sets preferred release to pick up packages from, you can specify codename or archive name

Corresponding configuration option: L<apt::default-release>

Examples: C<cupt install -t unstable xserver-xorg>, C<cupt -t squeeze full-upgrade>

=item --purge

when removing packages, also delete their configuration files

Corresponding configuration option: L<cupt::worker::purge>

=item --quiet,-q

don't output anything to standard output

=back

=head1 CONFIGURATION VARIABLES

Firstly, Cupt uses following APT configuration variables:

acquire::*::timeout, acquire::*::proxy, acquire::retries,
apt::acquire::translation, apt::cache::allversions, apt::cache::important,
apt::cache::namesonly, apt::cache::recursedepends, apt::default-release,
apt::install-recommends, apt::install-suggests, apt::neverautoremove,
apt::get::allowunauthenticated, dir, dir::bin::dpkg, dir::cache,
dir::cache::archives, dir::etc, dir::etc::sourcelist, dir::etc::sourceparts,
dir::etc::parts, dir::etc::main, dir::etc::preferences, dir::state,
dir::state::extendedstates, dir::state::lists, dir::state::status,
dpkg::options, dpkg::pre-invoke, dpkg::post-invoke, dpkg::pre-install-pkgs,
gpgv::trustedkeyring, quiet

See L<apt.conf(5)> for their meanings.

Secondly, Cupt recognizes (but doesn't use) following configuration variables:

apt::cache-limit, rpm::pre-invoke, rpm::post-invoke

Thirdly, Cupt introduces following cupt-specific configuration variables:

=over

=item acquire::http::allow-redirects

boolean (0/1), specifies whether should downloader follow HTTP redirects.
True by default.

=item cupt::downloader::max-simultaneous-downloads

positive number, specifies maximum number of simultaneous downloads

=item cupt::update::keep-bad-signatures

boolean (0/1), specifies whether to keep signature files that failed GPG check
when doing update. False by default. Setting this option to true will break
compatibility with APT in area of signature checking.

=item cupt::resolver::keep-recommends

boolean (0/1), specifies whether should resolver try to keep already installed
recommended packages or not. True by default.

=item cupt::resolver::keep-suggests

boolean (0/1), specifies whether should resolver try to keep already installed
suggested packages or not. False by default.

=item cupt::resolver::auto-remove

see L<--no-auto-remove/|--no-auto-remove>

=item cupt::resolver::max-solution-count

see L<--max-solution-count|/--max-solution-count>

=item cupt::resolver::external-command

a preview-only, experimental option to use external resolver using CUDF protocol
Don't use it unless you know what you are doing.

Example: C<< cupt -s safe-upgrade -o "cupt::resolver::external-command=cat > cudfout.txt" >>

=item cupt::resolver::no-remove

see L<--no-remove|/--no-remove>

=item cupt::resolver::syncronize-source-versions

string, this option controls whether and how the native resolver will attempt to keep
all binary packages from the same source package at the same source version

Possible values:

=over

=item none

Don't attempt to syncronize source versions. This is the default value.

=item soft

Don't forbid any modifications to the packages and attempt to syncronize
related binary packages when possible upon the modifications of certain binary
package.

=item hard

Forbid any modifications to the packages when at least one related binary
package cannot be syncronized with the modified one.

=back

Example:

Suppose we have 'libfoo1' and 'foo' binary packages which came from the same
source package. We have libfoo1 '1.2-1' and foo '1.2-1' installed.

Situation 1: libfoo1 has new '1.3-1' version and foo has new '1.3-1' version.

Situation 2: libfoo1 has new '1.3-1' version and foo has new '1.3-2' version.

We called: C<cupt install foo>.

What would be done by resolver:

=over

=item none

Situation 1: install new foo, leave libfoo1 as of installed version

Situation 2: install new foo, leave libfoo1 as of installed version

=item soft

Situation 1: install new foo and libfoo1

Situation 2: install new foo, leave libfoo1 as of installed version

=item hard

Situation 1: install new foo and libfoo1

Situation 2: prohibit to install new version of foo

=back

=item cupt::resolver::track-reasons

see L<--show-reasons|/--show-reasons,--show-deps,-D>

=item cupt::resolver::type

see L<--resolver|/--resolver>

=item cupt::worker::defer-triggers

boolean (0/1), specifies whether should worker defer dpkg trigger processing to
the end of the whole operation or not. Being set to true, speeds up
large-amount actions, but if the operation will somewhy interrupted, leaves
system in the interim trigger state, which can be fixed by manual run of 'dpkg
--triggers-only --pending' command. True by default.

=item cupt::worker::download-only

see L<--download-only|/--download-only,-d>

=item cupt::worker::purge

boolean (0/1), specifies whether purge packages in addition to removing or not.
False by default.

=item cupt::worker::simulate

see L<--simulate|/--simulate,-s>

=item debug::resolver

boolean (0/1), if true, resolver will print a lot of debug information to the
standard error

=item debug::worker

boolean (0/1), if true, worker will print some debug information to the
standard error

=item debug::gpgv

boolean (0/1), if true, cache will print some debug information while verifying
signatures to the standard error

=item debug::downloader

boolean (0/1), if true, the downloader manager will print some debug messages

=back

=head1 DEFINITIONS

TODO

=head1 REPORTING

Please report all bugs in Cupt to Debian BTS using L<reportbug(1)>.

The discussion channel about Cupt is irc://irc.debian.org#cupt.

=head1 SEE ALSO

L<cupt_vs_apt(5)>, L<cupt_howto(7)>

=head1 AUTHOR

Eugene V. Lyubimkin <jackyf.devel@gmail.com>

=cut

