Functional selectors in Cupt
Eugene V. Lyubimkin
%%date

%!preproc(man): '%man% ' ''
%!postproc(man): "^(\.TH.*) 1 "  "\1 7 "
%!postproc(man): ' \(#\w+\)' ''
%!options(html): --toc
%!postproc(html): <HEAD> '<HEAD>\n<STYLE>body{margin:2em;}</STYLE>'
%!postproc: '^the_end_of_the_config_area' ''

the_end_of_the_config_area

%man% = NAME =
%man%
%man% cupt_functionselectors - syntax of functional selectors in cupt package manager
%man%

= AIM =

Functional selectors are used for fine-grained selection of versions. While
standard mechanisms provide a way to select versions by package name, version
string and/or distribution, functional selectors embed a microlanguage to
select versions by their various properties.

= SYNTAX =

Functional selector expression (FSE) consists of **function name** and **list of arguments**:

'//function_name//``(``//argument1//, //argument2//, ... //argumentN//``)``'

Every argument can be a FSE itself or a string. Arguments are separated by the
comma (``,``).  Additional space characters are allowed (and ignored by parser)
anywhere except between the function name and the opening bracket.

If the argument is a string and contains commas or round brackets, the argument
should be quoted by placing the ``/`` character around it
('``/``//argument//``/``').

If the function receives no arguments, arguments bracked may be omitted:
'//function_name//' is an equivalent to '//function_name//``()``'.

The expression '//argument1// ``&`` //argument2// ``&`` ... ``&``
//argumentN//' is a special short form for '``and(``//argument1//,
//argument2//, ...
//argumentN//``)``'. Similarly, the expression '//argument1// ``|``
//argument2// ``|`` ... ``|`` //argumentN//'
is a special short form for '``or(``//argument1//, //argument2//, ...
//argumentN//``)``'

= FUNCTION REFERENCE =

== Logic functions ==

=== and ===

``and(``//fse1//, //fse2//, ... //fseN//``)``

Receives one or more FSE-arguments. Returns versions which satisfy all of the
//fse1//..//fseN//.

=== or ===

``or(``//fse1//, //fse2//, ... //fseN//``)``

Receives one or more FSE-arguments. Returns versions which satisfy any of the
//fse1//..//fseN//.

=== not ===

``not(``//fse//``)``

Receives one FSE-argument. Returns versions which don't satisfy //fse//.

=== xor ===

``xor(``//fse1//``, //fse2//``)``

Receives two FSE-arguments. Returns versions which satisfy either //fse1// or
//fse2// but not both.
