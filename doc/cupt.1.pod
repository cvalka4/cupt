=pod

=encoding utf8

=head1 NAME

cupt - console package management tool

=head1 DESCRIPTION

Cupt is a high-level package manager for Debian and Debian-based systems.

You might want to read L<cupt_tutorial(7)> (or its HTML version at
/usr/share/doc/cupt/tutorial.html) before.

=head1 SYNOPSIS

cupt [ I<option>... ] I<action> [ { I<parameter> | I<option> } ... ]

=head1 ACTIONS

=head2 Query actions

=over

=item version,-v,--version

prints versions of packages 'cupt' and 'libcupt-perl'

=item help,-h,--help

prints the short help for available actions

=item config-dump

prints all configuration variables to standard output

Example:

C<cupt config-dump>

=item show

prints version info of specified binary packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --all-versions,-a

print all versions of the package, not selected one

Corresponding configuration variable: L<apt::cache::allversions>

=item --no-all-versions

don't print all versions of the package, use only selected one

Corresponding configuration variable: L<apt::cache::allversions>

=item --with-release-info

also print information about release info where the version of the package live

=back

Examples:

C<cupt show qmmp>

C<cupt show --all-versions qmmp debianutils>

C<cupt show --with-release-info audacious/testing apt debianutils=2.3.38>

=item showsrc

The same as L<show>, only for source packages.

Examples:

C<cupt showsrc --all-versions qmmp>

C<cupt showsrc --with-release-info audacious/testing apt>

C<cupt showsrc libxine1>

=item search

searches for packages that contains some string within package names and package descriptions

This subcommand receives a list a Perl-compatible Regular Expressions (PCRE) to
search. Only those packages will be printed that contain all of specified
patterns.

Specific options:

=over

=item --case-sensitive

search case-sensitively

=item --names-only,-n

search only in package names

Corresponding configuration variable: L<apt::cache::namesonly>

=back

Examples:

C<cupt search nvidia driver>

C<cupt search --case-sensitive Vim>

C<cupt search -n vim>

C<cupt search "package manager">

=item showauto

prints list of automatically/manually installed packages, one package name per
line

L<cupt showauto>: prints list of automatically installed packages

L<cupt showauto --invert>: prints list of manually installed packages

=item depends

prints dependency relation expressions for given version of package

By default prints 'Pre-Depends', 'Depends' and 'Recommends' for the version.

This subcommand receives list of L</"Binary package version expression">'s, see below.

Specific options:

=over

=item --with-suggests

take also 'Suggests' dependencies into account

=item --recurse

process the dependencies recursively

Corresponding configuration variable: L<apt::cache::recursedepends>

=item --all-versions,-a

when L<--recurse|/--recurse> is specified, pick up all versions for the
relation expression, not the "best" one

Corresponding configuration variable: L<apt::cache::allversions>

=back

Examples:

C<cupt depends nlkt perl/stable>

C<cupt depends --important xserver-xorg-core>

C<cupt depends --recurse xmlto>

=item rdepends

same as L<depends>, but prints reverse relations instead of forward ones

=item why

prints one of available dependency paths between package(s)/system and the
package.

This subcommand receives a list of binary package expressions (which can be
empty), then one binary package expression without wildcards.

If the list of binary package expressions is empty (i.e. subcommand received
only one argument), then the list is build of manually installed packages in
the system.

If no dependency paths found, prints nothing.

Uses configuration variables
L<cupt::resolver::keep-recommends|/cupt::resolver::keep-recommends> and
L<cupt::resolver::keep-suggests|/cupt::resolver::keep-suggests> to determine
whether to honor Recommends and Suggests respectively when building dependency
paths.

Examples:

C<cupt why kmail libgnutls26>

C<cupt why libgnutls26>

C<cupt why icedove kmail libgnutls26>

=item policy

Given arguments, prints available versions with pins and release info for each binary package

Arguments: list of binary package names.

Given no arguments, prints available Release info for binary packages.

Examples:

C<cupt policy>

C<cupt policy dpkg>

C<cupt policy libpqxx-2.6.9ldbl libpqxx-3.0>

=item policysrc

Given arguments, prints available versions with pins and release info for each source package.

Arguments: list of source package names.

Given no arguments, prints available Release info for source packages.

Examples:

C<cupt policysrc>

C<cupt policysrc dpkg>

C<cupt policysrc libpqxx libpqxx3>

=item pkgnames

prints package names that start with a supplied suffix

If no suffix is given, prints all package names

Examples:

C<cupt pkgnames>

C<cupt pkgnames liba>

=item changelog

displays changelog for given versions of packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Works only with installed packages and official Debian and Ubuntu repositories.

Examples:

C<cupt changelog dpkg/installed>

C<cupt changelog --installed-only dpkg nlkt lintian>

C<cupt changelog libqtcore4>

=item copyright

displays copyright for given versions of packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

Works only with installed packages and official Debian and Ubuntu repositories.

Examples:

C<cupt copyright dpkg/installed>

C<cupt copyright --installed-only dpkg nlkt lintian>

C<cupt copyright libqtcore4>

=item screenshots

open a browser window/tab with screenshots of given packages.

This subcommand receives list of package names.

Example:

C<cupt screenshots arora>

=item snapshot list

list names of the available system snapshots, one per line

This subcommand receives no arguments.

Example: C<cupt snapshot list>

=item tar-metadata

This subcommand is experimental. Its name and functionality are unstable.

Packs all cupt configuration files and repository metadata to a tar stream and
outputs it to standard output.

Example: C<< cupt tar-metadata | xz --verbose -c > cupt-metadata.tar.xz >>

=back

=head3 query-specific options

=over

=item --important,-i

don't take 'Recommends' dependencies into account

Corresponding configuration variable: L<apt::cache::important>

=item --installed-only

work only with installed versions of packages; valuable only for L</show>,
L</depends>, L</rdepends>, L</search>, L</pkgnames>, L</changelog> actions

=back

=head2 Management actions

=over

=item update

updates package indexes

This subcommand receives no arguments.

Example:

C<cupt update>

=item install

installs, upgrades or downgrades specified packages

This subcommand receives list of L</"Binary package version expression">'s, see below.

If some version of package was already installed, this command will
upgrade/downgrade it; otherwise, the package will be freshly installed.

Examples:

C<cupt install nlkt>

C<cupt install devscripts xserver-xorg/experimental xfce4-mixer=4.6.0-2>

=item remove

removes specified packages

This subcommand receives the list of package names.

Examples:

C<cupt remove nlkt>

C<cupt remove devscripts kde4-minimal>

=item purge

removes specified packages along with their configuration files.  Also this
command can purge the configuration files when the packages are removed
already.

This subcommand receives the list of package names.

Examples:

C<cupt purge nlkt>

C<cupt purge devscripts kde4-minimal>

See also the configuration option L<cupt::worker::purge>.

=item full-upgrade

performs as more upgrades of the installed packages as possible, the
recommended way to do upgrades

This subcommand is usually invoked without any further parameters:

C<cupt full-upgrade>

List of L</"Binary package version expression">'s can be however specified as additional parameters.

Example: the command C<cupt full-upgrade xserver-xorg/installed> will try to upgrade
your system, however preserving package 'xserver-xorg' to be sticked with
currently installed version.

=item safe-upgrade

the same as L</full-upgrade>, but with the change that problem resolver won't
try to remove non-automatically installed packages in order to upgrade more
packages, equivalent of 'full-upgrade --no-remove'.

=item dist-upgrade

the same as L</full-upgrade>, but firstly upgrades the package management tools,
then upgrades the whole system.

Recommended over L</full-upgrade> for major upgrades.

=item reinstall

reinstalls specified binary packages

This subcommand receives list of binary package names.

Examples:

C<cupt reinstall libc6>

=item markauto

marks specified packages as automatically installed

This subcommand receives the list of package names.

Examples:

C<cupt markauto libstreamanalyzer0>

C<cupt markauto lsof gimp-data>

=item unmarkauto

marks specified packages as manually installed

This subcommand receives the list of package names.

Examples:

C<cupt unmarkauto kpogre>

C<cupt unmarkauto dpkg-dev>

=item satisfy

performs all needed operations to satisfy list of specified relations

This subcommand receives the list of relations or relation lines. Relation and
relation lines has the same syntax as defined in Debian Policy ยง7.1.

The minus sign can be appended to some of relation expression lines to make
relation expressions unsatisfied instead.

Examples:

C<< cupt satisfy "kmail (>= 4:4.2), wget (>= 1.10.0)" >>

C<< cupt satisfy "gettext (= 0.17-7)" "mail-transport-agent-" >>

=item build-dep

performs all needed operations to satisfy list of build-dependencies of
specified source packages

This subcommand receives the list of L</Source package version expression>'s.

Examples:

C<< cupt build-dep qt4-x11 >>

C<< cupt build-dep unetbootin/unstable libcdio/experimental >>

=item source

fetches Debian source files needed to build a Debian binary package

This subcommand receives the list of L</Source package version expression>'s.

Parameters:

=over

=item --tar-only

download only original tarball

=item --diff-only

download only Debian diff

=item --dsc-only

download only Debian dsc

=item --download-only

don't unpack downloaded source files

=back

Examples:

C<< cupt source libsort-fields-perl >>

C<< cupt source --diff-only libpqxx cupt/unstable >>

C<< cupt source libxine1 >>

=item clean

removes all deb archives and partially downloaded archive files from the cache on a disk

This subcommand receives no arguments.

Example: C<cupt clean>

=item autoclean

removes deb archives which are not available in package indexes and partially
downloaded archive files from the cache on a disk

This subcommand receives no arguments.

Example: C<cupt autoclean>

=item snapshot save

saves a snapshot of the current packages state

This subcommand receives one argument - desired snapshot name.

Example: C<cupt snapshot save old-udev>

=item snapshot load

returns the system (as set of installed packages) to the previously saved
state

This subcommand receives one argument - snapshot name to load.

Example: C<cupt snapshot load old-udev>

=item snapshot remove

removes the system snapshot

This subcommand receives one argument - snapshot name to remove.

Example: C<cupt snapshot remove old-libgtk>

=item snapshot rename

renames the system snapshot

This subcommand receives two arguments - old snapshot name and new snapshot
name.

Example: C<cupt snapshot rename old-libgtk 20091005>

=item shell

starts interactive shell-like environment

This subcommand receives no arguments.

This subcommand can receive all common options which will be preserved
across all session. You can override them for any subcommand in a usual way.

On every shell prompt you can supply any valid subcommand from this manual
page, using all allowed parameters, just if it was command line. Simple shell
quotes around arguments are also allowed.

You can use 'quit', 'exit', ':q' or 'q' command to exit cupt shell.

=back

=head3 management-specific options

=over

=item --no-remove

disallow problem resolver to remove manually installed packages. Packages that are marked to remove/purge in the command line will be remove/purged as usual.

Corresponding configuration option: L<cupt::resolver::no-remove>

=item --no-auto-remove

don't try to remove automatically installed packages after doing requested
actions

Corresponding configuration option: L<cupt::resolver::auto-remove>

=item --simulate,-s

don't modify anything in the system, just print supposed actions

Doesn't require root privileges.

Corresponding configuration option: L<cupt::worker::simulate>

=item --resolver=

string, determines type of resolver: can be

=over

=item fair

medium-class resolver. It chooses best possible solution (by overall score)
each time. This is a default resolver.

=item full

full resolver. Guaranteed to suggest solution in precise order from the best to
the worst result score (by the resolver's opinion). Latter means that resolver
builds full resolve tree before suggesting the solutions, which means large RAM
and speed penalties. Use it with caution.

=back

Corresponding configuration option: L<cupt::resolver::type>

=item --max-solution-count=

number, determines how many maximum solutions will resolver store in memory. This
option prevents large memory grows by purging away solutions with worst scores.
Defaults to 512.  Note that very complex requests or requests on
multi-repository system will increase size of solution tree dramatically, so
prepare to play with increasing this option accordingly.

Corresponding configuration option: L<cupt::resolver::max-solution-count>

=item --no-install-recommends,-R

cupt installs recommended packages by default, this option cancels described behavior

Corresponding configuration option: L<apt::install-recommends>

=item --show-versions,-V

when displaying actions preview prompt, display also versions of packages

=item --show-size-changes,-Z

when displaying actions preview prompt, display also changes in disk space
usage for each package

=item --show-reasons,--show-deps,-D

when displaying actions preview prompt, display also reasons why this action was
considered to perform

Corresponding configuration option: L<cupt::resolver::track-reasons>

=item --no-install-unpacked

By default cupt will implicitly install all already unpacked packages, this is
needed, for example, for proper continue of interrupted upgrades. This option
cancels behavior described.

=item --download-only,-d

stop after download stage, don't modify the system; not applicable for
L</markauto> and L</unmarkauto> actions

Corresponding configuration option: L<cupt::worker::download-only>

=item --assume-yes,--yes,-y

don't ask for solution confirmation, assume the answer is 'y' ("yes"), except
for dangerous actions, where assume 'q' ("decline and exit")

Corresponding configuration options: L<apt::get::assume-yes>, L<cupt::console::assume-yes>

=back

=head3 management modifiers: action override options

Unlike all the other options, these ones are positional and are effective only
for the rest of parameters (and before next override option if any). One can
specify as many action override options as needed.

=over

=item --install

install the rest of packages

Example:

C<cupt remove msmtp-mta --install exim4-daemon-light esmtp> - install the packages
'exim4-daemon-light' and 'esmtp', remove the package 'msmtp-mta'

=item --remove

remove rest of packages

Example:

C<cupt install exim4-daemon-light --remove msmtp-mta esmtp> - install the package
'exim4-daemon-light', remove the packages 'msmtp-mta' and 'esmtp'

=item --purge

purge the rest of packages

Example:

C<cupt purge libkate1 --remove libass4 --purge libdirac-decoder0> - remove the
package 'libass4', purge packages 'libkate1' and 'libdirac-decoder0'

=item --satisfy

satisfy the rest of relation expressions

Example:

C<< cupt install lightspark --remove gnash --satisfy "iceweasel (>= 5)" >> -
install the package 'lightspark', remove the packae 'gnash', and make sure that
iceweasel (at least of version 5) is installed

=item --unsatisfy

unsatisfy the rest of relation expressions

Example:

C<< cupt install sieve-connect --unsatisfy "iceweasel (<< 3.5.20)" >> - install
the package 'sieve-connect', upgrade or remove the package 'iceweasel' if it is installed
and has the version lower than '3.5.20'

=back

=head3 management modifiers: package name suffixes

=over

=item -

remove the package, can be used in non-remove actions

Examples:

C<cupt install kde4 icewm-> - install the package
'kde4' and remove the package 'icewm' simultaneously.

C<cupt full-upgrade iceweasel- icedove-> - upgrade the system, deleting iceweasel and icedove

=item +

install the package, can be used in remove actions

Examples:

C<cupt remove kde konqueror+> - remove kde, but install/upgrade konqueror

C<cupt remove kde konqueror/installed+> - remove kde, but leave konqueror

=back

=head1 EXPRESSIONS

This section documents some common expressions used by actions.

=head2 Binary package version expression

I<package_name>[I<modifier>]

selects one version of given binary package.

Possible modifiers:

=over

=item <none>

selects L<policy version|/"Policy version"> of the package

Example: C<audacious>.

=item =<version string>

selects specified version of the package

Example: C<audacious=1.5.1-2>

=item /<distribution>

selects a version from specified distribution (archive name or codename)

Examples: C<audacious/lenny> (by codename), C<audacious/stable> (by archive name)

=item /installed

selects installed version of the package

Example: C<audacious/installed>

=back

Also, you may specify shell wildcars '*' and '?' in the package names.

Examples: C<xfce4-*>, C<python2.5-*/unstable>, C<?aff*/installed>

For all management subcommands, there is also '@<path-to-file>' syntax. In this
case this construction will be substituted by binary package expressions listed
in the specified file one by line.

=head2 Source package version expression

I<package_name>[I<modifier>]

selects one version of given source package.

Possible modifiers are identical to those defined in L</Binary package version
expression>, except for '/installed'.

Also, you can specify L</Binary package version expression> as
L</Source package version expression>, then binary-to-source mapping
will be performed.

=head1 COMMON OPTIONS

=over

=item --option=,-o

sets specified configuration option, syntax: "<name>=<value>"

Examples:

C<cupt remove nlkt -o 'cupt::resolver::keep-recommends=0'> (regular option)

C<cupt remove nlkt -o 'apt::neverautoremove::=libcanberra0> (list option)

=item --target-release=,--default-release=,-t

sets preferred release to pick up packages from, you can specify codename or archive name

Corresponding configuration option: L<apt::default-release>

Examples: C<cupt install -t unstable xserver-xorg>, C<cupt -t squeeze full-upgrade>

=item --include-archives=

Use only repositories with specified archive names (comma-separated).

Corresponding configuration options:
L<cupt::cache::limit-releases::by-archive>,
L<cupt::cache::limit-releases::by-archive::type>.

Example:

C<cupt safe-upgrade --include-archives=stable,stable-updates>

=item --exclude-archives=

Ignore repositories with specified archive names (comma-separated).

Corresponding configuration options:
L<cupt::cache::limit-releases::by-archive>,
L<cupt::cache::limit-releases::by-archive::type>.

Example:

C<cupt rdepends libcomerr2 --exclude-archives=experimental,unstable>

=item --include-codenames=

Use only repositories with specified codenames (comma-separated).

Corresponding configuration options:
L<cupt::cache::limit-releases::by-codename>,
L<cupt::cache::limit-releases::by-codename::type>.

Example:

C<cupt safe-upgrade --include-codenames=squeeze,squeeze-updates>

=item --exclude-codenames=

Ignore repositories with specified codenames (comma-separated).

Corresponding configuration options:
L<cupt::cache::limit-releases::by-codename>,
L<cupt::cache::limit-releases::by-codename::type>.

Example:

C<cupt rdepends libcomerr2 --exclude-codenames=experimental,sid>

=item --quiet,-q

don't output anything to standard output

=back

=head1 CONFIGURATION VARIABLES

Firstly, Cupt uses following APT configuration variables:

acquire::*::timeout, acquire::*::proxy, acquire::http::allowredirect,
acquire::retries, apt::acquire::translation, apt::cache::allversions,
apt::cache::important, apt::cache::namesonly, apt::cache::recursedepends,
apt::default-release, apt::install-recommends, apt::install-suggests,
apt::neverautoremove, apt::get::assume-yes, apt::get::allowunauthenticated,
apt::get::automaticremove, apt::get::list-cleanup, apt::get::purge,
apt::update::pre-invoke, apt::update::post-invoke,
apt::update::post-invoke-success, dir, dir::bin::dpkg, dir::cache,
dir::cache::archives, dir::etc, dir::etc::sourcelist, dir::etc::sourceparts,
dir::etc::parts, dir::etc::main, dir::etc::preferences, dir::state,
dir::state::extendedstates, dir::state::status, dpkg::options,
dpkg::pre-invoke, dpkg::post-invoke, dpkg::pre-install-pkgs,
gpgv::trustedkeyring, quiet

See L<apt.conf(5)> for their meanings.

Secondly, Cupt recognizes (but doesn't use) following configuration variables:

apt::archives::*, acquire::pdiffs, apt::cache-limit, apt::periodic::*,
dir::log*, dir::state::lists, unattended-upgrade::*, acquire::compressiontypes,
apt::get::show-upgraded, apt::get::build-dep-automatic, rpm::pre-invoke,
rpm::post-invoke

Thirdly, Cupt introduces cupt-specific configuration variables.

=head2 variable types

=over

=item boolean

false may be specified as "0" or "false" or "no", everything else interpretes as true

if undefined, interpretes as false

=item integer

signed 32-bit integer on 32-bit systems, signed 64-bit integer on 64-bit systems

if undefined, interpretes as 0

=item string

interpreted as is

if undefined, interpretes as empty string

=item list

list of strings

if undefined, intepretes as empty list

=back

=head2 variables

=over

=item cupt::cache::limit-releases::by-*::type

string, determines the type of limiting repository releases to use

All repository indexes which are disallowed by this option are not added to
the package cache, in other words, they are completely hidden.

'*' can be 'archive' or 'codename'

Possible values:

=over

=item none

No limiting will be done for this category. The default.

=item include

Only values of the 'cupt::cache::limit-releases::by-*' option will be allowed.

=item exclude

Only values which are not present in the value of the 'cupt::cache::limit-releases::by-*' option will be allowed.

=back

Example:

If you set 'cupt::cache::limit-releases::by-archive::type' to 'include' and
'cupt::cache::limit-releases::by-archive' to '{ "stable", "testing" };', only
repositories with archive names 'stable' and 'testing' will be added to the
cache.

=item cupt::cache::limit-releases::by-*

list of allowed/disallowed release attributes, see above

=item cupt::cache::pin::addendums::downgrade

integer, specifies priority change for versions that are smaller than currently
installed. Defaults to -10000.

=item cupt::cache::pin::addendums::hold

integer, specifies priority increase for versions that are put on hold.
Defaults to 1000000. Set this option to 0 if you do not want to obey holds.
You may want to increase this option in (very unlikely to happen) situations:
when you have thousands of manually installed packages and very large query;
when you have a manually crafted pin priorities system with very large pin
values.

=item cupt::cache::pin::addendums::not-automatic

integer, specifies priority increase for versions that come only from 'not
automatic' sources. Defaults to -4000.

=item cupt::cache::release-file-expiration::ignore

boolean, if set to true, Cupt will ignore the fact that a Release file is
expired and use it anyway. False by default.

B<Warning! Setting this option to true will make the system vulnerable to a replay attack on package manager indexes.>

=item cupt::console::allow-untrusted

boolean, don't treat using untrusted packages as dangerous action

=item cupt::console::assume-yes

boolean, see L<--assume-yes|/--assume-yes>

=item cupt::console::actions-preview::show-not-preferred

string, determines whether packages which will have a not preferred version
after the proposed changes are done should be shown in the actions preview.
Defaults to 'for-upgrades'.

Possible values:

=over

=item no

Do not show.

=item for-upgrades

Show for upgrade subcommands (namely, for L</full-upgrade>, L</safe-upgrade>
and the second part of L</dist-upgrade>).

=item yes

Show always.

=back

=item cupt::directory

string, base directory for all cupt::directory::* options

=item cupt::directory::configuration

string, base directory for Cupt-specific configuration files

=item cupt::directory::configuration::main

string, relative file path for the Cupt main configuration file (same format as
L<apt.conf(5)>)

=item cupt::directory::configuration::main-parts

string, relative directory path for additional Cupt configuration files (same
format as L<apt.conf(5)>)

=item cupt::directory::log

string, relative file path for the log file

=item cupt::directory::state

string, directory which contains Cupt state info

=item cupt::directory::state::lists

string, directory for repository indexes

=item cupt::downloader::max-simultaneous-downloads

integer, positive, specifies maximum number of simultaneous downloads. Defaults to 2.

=item cupt::downloader::protocols::I<protocol>::priority

integer, positive, defines the priority of download protocol I<protocol>, determines an order in which
different URIs for the same file will be tried. Defaults to 100.

=item cupt::downloader::protocols::I<protocol>::methods::I<method>::priority

positive number, defines the priority of download method I<method>, the method
with maximum priority will be used for downloading the URI of protocol
I<protocol>.
Defaults to 100.

=item cupt::downloader::protocols::I<protocol>::methods

list, names of the methods available to download protocol I<protocol>

=item cupt::update::check-release-files

boolean, if set, Release files will be checked for the validity (including the
expiration check and a signature if present) at the download stage. True by default.

=item cupt::update::compression-types::*::priority

integer, defines preference to download compressed files with higher priority first. 100 by default.

'*' can be 'gz', 'bz2', 'lzma', 'xz', and 'uncompressed'.

Set some option to <100 value to make it low-precedence than default, and >100
to make it high-precedence than default.

If some methods have the equal priority (which is the default setting), then
files with smaller size with be chosen over the files with bigger size.

Example:

You have a low-speed CPU but rather high-speed internet connection and want to
prefer gzip over lzma and lzma over bzip2. Then you have to set options like:

  cupt::update::compression-types
  {
    gz::priority "200";
    lzma::priority "150";
  }

Also, if you have a local mirror, which may store uncompressed indexes too
(an official Debian archive doesn't store them), you may set also

cupt::update::compression-types::uncompressed::priority "300";

=item cupt::update::keep-bad-signatures

boolean, specifies whether to keep signature files that failed GPG check
when doing update. True by default. Setting this option to false will not have
an effect if the option L<cupt::update::check-release-files> is set to false.

=item cupt::update::use-index-diffs

boolean, specifies whether to try downloading repository index deltas and apply
them locally before downloading the full index. True by default.

When turned on, this option saves bandwidth but increases CPU and disk usage
while updating. On the fast unlimited connections (say, >= 2 Mbit/s, but
heavily depends on many other factors) you would likely want to turn off this
option.

=item cupt::resolver::keep-recommends

boolean, specifies whether should resolver try to keep already installed
recommended packages or not. True by default.

=item cupt::resolver::keep-suggests

boolean, specifies whether should resolver try to keep already installed
suggested packages or not. False by default.

=item cupt::resolver::auto-remove

boolean, see L<--no-auto-remove/|--no-auto-remove>

=item cupt::resolver::max-solution-count

integer, positive, see L<--max-solution-count|/--max-solution-count>

=item cupt::resolver::external-command

string, a preview-only, experimental option to use external resolver using CUDF
protocol. Don't use it unless you know what you are doing.

Example: C<< cupt -s safe-upgrade -o "cupt::resolver::external-command=cat > cudfout.txt" >>

=item cupt::resolver::no-remove

boolean, see L<--no-remove|/--no-remove>

=item cupt::resolver::synchronize-by-source-versions

string, this option controls whether and how the native resolver will attempt to keep
all binary packages from the same source package at the same source version

This option uses the information from source packages. No synchronization will
be performed for the versions which have not a corresponding source version in
the repository.

Possible values:

=over

=item none

Don't attempt to synchronize. This is the default value.

=item soft

Don't forbid any modifications to the packages and attempt to synchronize
related binary packages when possible upon the modifications of certain binary
package.

=item hard

Forbid any modifications to the packages when at least one related binary
package cannot be synchronized with the modified one.

=back

=item cupt::resolver::track-reasons

boolean, see L<--show-reasons|/--show-reasons,--show-deps,-D>

=item cupt::resolver::type

string, see L<--resolver|/--resolver>

=item cupt::resolver::score::<part>

The group of integer options which control internal resolver's score
calculation. Values are absolute.

<part> can be one of:

=over

=item new

installing a new package

=item removal

removal of an existing package

=item removal-of-essential

removal of an existing essential package (a general B<removal> option is applied as well)

=item upgrade

installing a higher version of an existing package

=item downgrade

installing a lower version of an existing package

=item position-penalty

when several actions may be performed to resolve a problem, apply N penalties
to N-th action (counting from 0)

=item quality-adjustment

the value will be added to each action's score

=item unsatisfied-recommends

some 'recommends' dependency is not satisfied (when requested)

=item unsatisfied-suggests

some 'suggests' dependency is not satisfied (when requested)

=item failed-synchronization

some source version synchronization cannot be performed (when
L<cupt::resolver::synchronize-source-versions|/cupt::resolver::synchronize-source-versions>
is 'soft')

=back

=item cupt::worker::archives-space-limit

integer, bytes, positive, if set, limits the worker to not download more than specified
amount of archives, and use download-install-clean algorithm (download
archives, install packages, clean just downloaded archives).  Worker will try
to split all actions into unrelated changesets so each changeset require only
limited download space. Any system changes will be started only if changesets
are generated successfully.

=item cupt::worker::defer-triggers

boolean, specifies whether should worker defer dpkg trigger processing to
the end of the whole operation or not. Being set to true, speeds up
large-amount actions, but if the operation will somewhy be interrupted, leaves
system in the interim trigger state, which can be fixed by manual run of 'dpkg
--triggers-only --pending' command. False by default due to tiresome dpkg bug
(Debian BTS #526774).

=item cupt::worker::download-only

boolean, see L<--download-only|/--download-only,-d>

=item cupt::worker::log

boolean, whether to log performed actions or not. True by default.

=item cupt::worker::log::levels::metadata

non-negative integer, the log level for the metadata updates. 1 by default.

=item cupt::worker::log::levels::packages

non-negative integer, the log level for the package changes
(install/upgrade/remove etc.). 2 by default.

=item cupt::worker::log::levels::snapshots

non-negative integer, the log level for the snapshot actions. 1 by default.

=item cupt::worker::purge

boolean, specifies whether purge packages in addition to removing or not.
False by default.

=item cupt::worker::simulate

boolean, see L<--simulate|/--simulate,-s>

=item cupt::worker::use-locks

boolean, specifies whether Cupt protects simultaneous runs of itself against
the misuse of the common resources. True by default.

B<Warning! Setting this option to false will allow several non-simulating Cupt
instances to break the system when misused.>

=item debug::resolver

boolean, if true, resolver will print a lot of debug information to the
standard error. False by default.

=item debug::worker

boolean, if true, worker will print some debug information to the
standard error. False by default.

=item debug::gpgv

boolean, if true, cache will print some debug information while verifying
signatures to the standard error. False by default.

=item debug::downloader

boolean, if true, the downloader manager will print some debug messages. False
by default.

=item debug::logger

boolean, if true, the logger will print some debug messages. False by default.

=back

=head1 REPORTING

Please report all bugs in Cupt to Debian BTS using L<reportbug(1)>.

The discussion channel about Cupt is irc://irc.debian.org#cupt.

=head1 SEE ALSO

L<cupt_vs_apt(5)>, L<cupt_tutorial(7)>

=head1 AUTHOR

Eugene V. Lyubimkin <jackyf@debian.org>

=cut

