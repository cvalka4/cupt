#!/usr/bin/perl
#BEGIN { $SIG{__DIE__} = sub { require Carp; Carp::confess(@_) } }

package Cupt::Error;

sub new {
	return bless {};
}

package Cupt::Core;

use 5.10.0;
use warnings;
use strict;

require Exporter;
our @ISA = ("Exporter");
our @EXPORT = qw(&myprint &mywarn &myerr &myredie &mydie &myinternaldie &mycatch);

use Locale::gettext;

import Cupt::Error;

#sub __ {
#	return gettext(shift);
#}

textdomain("cupt");

sub myprint {
	print sprintf(gettext(shift), @_);
}

sub mywarn {
	print "W: ";
	myprint @_;
	print "\n";
}

sub myerr {
	print "E: ";
	myprint @_;
	print "\n";
}

sub myredie() {
	die new Cupt::Error;
}

sub mydie {
	myerr @_;
	myredie();
}

sub myinternaldie {
	print "E: ", gettext("internal error: ");
	myprint @_;
	print "\n";
	exit 255;
}

sub mycatch() {
	# This subroutine is inspired from David Golden's Exception::Class::TryCatch::&catch
    my $err = $@;
    if (UNIVERSAL::isa($err, 'Cupt::Error')) {
        return 1;
	} elsif ($err ne "") {
		# some other error received, propagate it
		die $err;
    } else {
        return 0;
    }
}

1;

package Cupt::ISCConfigParser;
# This package is modified version of Matt Dainly's BIND::Config::Parser

import Cupt::Core;
use Parse::RecDescent;

my $grammar = q{

	<autotree>

	program:
		  <skip: qr{\s*
		            (?:(?://|\#)[^\n]*\n\s*|/\*(?:[^*]+|\*(?!/))*\*/\s*)*
		           }x> statement(s?) eofile { $item[2] }

	statement:
		  simple | nested | list

	simple:
		  name value ';'

	nested:
		  name '{' statement(s?) '}' ';'

	list:
		  name '{' (value ';')(s?) '}' ';'

	name:
		  /([\w\/-]+::)*([\w\/-]+)/

	value:
		  /".*"/

	eofile:
		  /^\Z/
};

sub new {
	my $class = shift;

	my $self = {
		'_regular_handler' => undef,
		'_list_handler' => undef,
	};

	$self->{'_parser'} = new Parse::RecDescent($grammar)
		or myinternaldie("bad grammar");

	bless $self, $class;
	return $self;
}

sub parse_file {
	my $self = shift;
	my $conffile = shift;

	open(FILE, $conffile) or mydie("unable to open file %s: %s", $conffile, $!);
	my $text = join("", <FILE>);
	close FILE;

	defined( my $tree = $self->{'_parser'}->program($text) )
		or mydie("bad config in file %s", $conffile);

	$self->_recurse($tree, "");
}

sub set_regular_handler {;
	my $self = shift;
	$self->{'_regular_handler'} = shift;
}

sub set_list_handler
{
	my $self = shift;
	$self->{'_list_handler'} = shift;
}

sub _recurse {
	my $self = shift;
	my $tree = shift;
	my $name_prefix = shift;

	foreach my $node (@{$tree}) {
		if (exists $node->{'simple'}) {
			my $item = $node->{'simple'};
			$self->{'_regular_handler'}->( $name_prefix . $item->{'name'}->{'__VALUE__'}, $item->{'value'}->{'__VALUE__'} );
		} elsif (exists $node->{'list'}) {
			my $item = $node->{'list'};
			my $name = $item->{'name'}->{'__VALUE__'};
			while ((my $key, my $value) = each %$item) {
				if (ref($value) eq 'ARRAY') {
					# list items here
					foreach my $listitem (@$value) {
						$self->{'_list_handler'}->( $name_prefix . $name, $listitem->{'value'}->{'__VALUE__'} );
					}
					last; # should be only one array of list items
				}
			}
		} else {
			if (exists $node->{'nested'}) {
				my $item = $node->{'nested'};
				$name_prefix .= $item->{'name'}->{'__VALUE__'} . '::';
				$self->_recurse($item->{'statement(s?)'}, $name_prefix);
			}
		}
	}
}

1;

package Cupt::Config;

import Cupt::ISCConfigParser;
import Cupt::Core;

sub new {
	my $class = shift;
	# APT::Build-Essential "";
	# APT::Build-Essential:: "build-essential";
	# APT::Acquire "";
	# APT::Acquire::Translation "environment";
	# Dir::State::cdroms "cdroms.list";
	# Dir::State::userstatus "status.user";
	# Dir::Etc::vendorlist "vendors.list";
	# Dir::Etc::vendorparts "vendors.list.d";
	# Dir::Bin::methods "/usr/lib/apt/methods";
	# Dir::Log "var/log/apt";
	# Dir::Log::Terminal "term.log";
	#
	my $self = {
		regular_vars => {
			'acquire::http::dl-limit' => 0,
			'apt::acquire::max-default-age::debian-security' => 7,
			'apt::authentication::trustcdrom' => 0,
			'apt::install-recommends' => 1,
			'apt::install-suggests' => 0,
			'dir' => '/',
			'dir::bin::dpkg' => '/usr/bin/dpkg',
			'dir::cache' => 'var/cache/apt',
			'dir::cache::archives' => 'archives',
			'dir::etc' => 'etc/apt',
			'dir::etc::sourcelist' => 'sources.list',
			'dir::etc::sourceparts' => 'sources.list.d',
			'dir::etc::parts' => 'apt.conf.d',
			'dir::etc::main' => 'apt.conf',
			'dir::etc::preferences' => 'preferences',
			'dir::state' => 'var/lib/apt',
			'dir::state::lists' => 'lists',
			'dir::state::status' => '/var/lib/dpkg/status',
			'dpkg::tools::options::/usr/bin/apt-listchanges::version' => 2,

			'cupt::delayed-index-parsing' => 1
		},

		list_vars => {
			'apt::neverautoremove' => [],
			'apt::update::pre-invoke' => [],
			'apt::update::post-invoke' => [],
			'dpkg::pre-install-pkgs' => [],
		},

	};
	$self->{regular_vars}->{'apt::architecture'} = __get_architecture();
	bless $self, $class;
	$self->_read_configs();
	return $self;
}

sub var {
	my $self = shift;
	my $var_name = shift;
	if (defined ($self->{regular_vars}->{$var_name})) {
		return $self->{regular_vars}->{$var_name};
	} elsif (defined ($self->{list_vars}->{$var_name})) {
		return $self->{list_vars}->{$var_name};
	} else {
		mydie("attempt to get wrong option %s", $var_name);
	}
}

sub set_regular_var {
	my $self = shift;
	my $var_name = lc(shift);
	if (defined ($self->{regular_vars}->{$var_name})) {
		my $new_value = shift;
		$self->{regular_vars}->{$var_name} = $new_value;
	} else {
		mydie("attempt to set wrong option %s", $var_name);
	}
}

sub set_list_var {
	my $self = shift;
	my $var_name = lc(shift);
	if (defined ($self->{list_vars}->{$var_name})) {
		my $new_value = shift;
		push @{$self->{list_vars}->{$var_name}}, $new_value;
	} else {
		mydie("attempt to set wrong option %s", $var_name);
	}
}

sub _read_configs {
	my $self = shift;
	my $parser = new Cupt::ISCConfigParser;

	my $regular_option_sub = sub {
		my $option_name = shift;
		my $value = shift;
		$value =~ s/"(.*)"/$1/;
		$self->set_regular_var($option_name, $value);
	};

	my $list_option_sub = sub {
		my $option_name = shift;
		map { s/"(.*)"/$1/; $self->set_list_var($option_name, $_); } @_;
	};

	$parser->set_regular_handler($regular_option_sub);
	$parser->set_list_handler($list_option_sub);

	my $root_prefix = $self->var('dir');
	my $etc_dir = $self->var('dir::etc');

	my $parts_dir = $self->var('dir::etc::parts');
	my @config_files = glob("$root_prefix$etc_dir/$parts_dir/*");

	my $main_file = $self->var('dir::etc::main');
	push @config_files, "$root_prefix$etc_dir/$main_file";

	foreach (@config_files) {
		$parser->parse_file($_);
	}
}

sub __get_architecture {
	my $answer = qx/dpkg --print-architecture/;
	chomp($answer);
	return $answer;
}

package Cupt::Cache::Relation;

use Exporter qw(import);

import Cupt::Core;

our @EXPORT_OK = qw(&__parse_relation_line &stringify_relations);

sub new {
	my $class = shift;
	my $self = {
		package_name => undef,
		relation => undef,
		version => undef,
	};
	bless $self => $class;

	my $unparsed = shift;

	if ($unparsed =~ m/^([a-z_0-9.+-]+)/g) {
		# package name is here
		$self->{package_name} = $1;
	} else {
		# no package name, badly
		mydie("failed to parse package name in relation '%s'", $unparsed);
	}

	if ($unparsed =~ m/
			\G # start at end of previous regex
			\s* # possible spaces
			\( # open relation brace
				(
					>=|=|<=|<<|>>|<|> # relation
				)
				\s* # possible spaces
				(
					[a-zA-Z+0-9~:.-]+ # version
				)
			\) # close relation brace
			$
		/xgc
	)
	{
		# versioned info is here, assigning
		($self->{relation}, $self->{version}) = ($1, $2);
	} else {
		# no valid versioned info, maybe empty?
		($unparsed =~ m/\G\s*$/g) # empty versioned info, this is also acceptable
			or mydie("failed to parse versioned info in relation '%s'", $unparsed); # what else can we do?..
	}

	return $self;
}

sub stringify {
	my $self = shift;
	my $result = $self->{package_name};
	if (defined($self->{relation})) {
		# there is versioned info
		$result .= join('', " (", $self->{relation}, ' ', $self->{version}, ')');
	}
	return $result;
}

sub stringify_relations {
	my @relation_strings;
	foreach my $object (@{$_[0]}) {
		if (UNIVERSAL::isa($object, 'Cupt::Cache::Relation')) {
			# it's ordinary relation object
			push @relation_strings, $object->stringify();
		} else {
			# it have be an 'OR' group of relations
			push @relation_strings, join(" | ", map { $_->stringify() } @$object);
		}
	}
	return join(", ", @relation_strings);
}

sub __parse_relation_line {
	my $relation_line = shift or myinternaldie("relation line is not defined");

	my @result;
	while ($relation_line =~ m/(.+?)(?:,\s*|$)/g) {
		# looking for OR groups
		my @relations = split / ?\| ?/, $1;
		if (scalar @relations == 1) {
			# ordinary relation
			push @result, new Cupt::Cache::Relation($relations[0]);
		} else {
			# 'OR' group of relations
			push @result, [ map { new Cupt::Cache::Relation($_) } @relations ];
		}
	}
	return \@result;
}

1;

package Cupt::Cache::SourcePkg::Version;

import Cupt::Core;
import Cupt::Cache::Relation;

sub new {
	my $class = shift;
	my $self = fields::new($class);

	# parsing fields
	my $ref_lines = shift;

	my $field_name = undef;
	eval {
		foreach my $line (@$ref_lines) {
			if ($line =~ m/^ /) {
				# part of long description
				$self->{long_description} .= $line;
			} else {
				(($field_name, my $field_value) = ($line =~ m/^((\w|-)+?): (.*)$/))
					or mydie("cannot parse line '%s'", $line);

				given ($field_name) {
					when ('Priority') { $self->{priority} = $field_value }
					when ('Section') { $self->{section} = $field_value }
					when ('Installed-Size') { $self->{installed_size} = $field_value }
					when ('Maintainer') { $self->{maintainer} = $field_value }
					when ('Source') { $self->{source_name} = $field_value }
					when ('Architecture') { $self->{architecture} = $field_value }
					when ('Version') { $self->{version} = $field_value }
					when ('Depends') { $self->{depends} = __parse_relation_line($line) }
					when ('Recommends') { $self->{recommends} = __parse_relation_line($line) }
					when ('Suggests') { $self->{suggests} = __parse_relation_line($line) }
					when ('Pre-Depends') { $self->{pre_depends} = __parse_relation_line($line) }
					when ('Enhances') { $self->{enhances} = __parse_relation_line($line) }
					when ('Breaks') { $self->{breaks} = __parse_relation_line($line) }
					when ('Provides') { $self->{provides} = __parse_relation_line($line) }
					when ('Conflicts') { $self->{conflicts} = __parse_relation_line($line) }
					when ('Filename') { push @{$self->{uris}}, $field_value }
					when ('Size') { $self->{size} = $field_value }
					when ('MD5sum') { $self->{md5sum} = $field_value }
					when ('SHA1') { $self->{sha1sum} = $field_value }
					when ('SHA256') { $self->{sha256sum} = $field_value }
					when ('Description') { $self->{short_description} = $field_value }
				}
				undef $field_name;
			}
		}
	};
	if (mycatch()) {
		if (defined($field_name)) {
			myerr("error while parsing field '%s'", $field_name);
		}
		myredie();
	}

	return $self;
}

sub is_hashes_equal {
	my $self = shift;
	my $other = shift;
	return ($self->{md5sum} eq $other->{md5sum} &&
			$self->{sha1sum} eq $other->{sha1sum} &&
			$self->{sha256sum} eq $other->{sha256sum});
}

1;

package Cupt::Cache::BinaryPkg::Version;

import Cupt::Core;
import Cupt::Cache::Relation qw(__parse_relation_line);

sub new {
	my $class = shift;
	my $self = {
		avail_as => [],
		# should contain array of hashes
		#	release => {
		#		archive,
		#		label,
		#		version,
		#		codename,
		#		vendor,
		#		component,
		#		signed,
		#	},
		#	base_uri
		#	filename

		priority => undef,
		section => undef,
		installed_size => undef,
		maintainer => undef,
		architecture => undef,
		source_name => undef,
		version => undef,
		depends => undef,
		recommends => undef,
		suggests => undef,
		conflicts => undef,
		breaks => undef,
		enhances => undef,
		provides => undef,
		pre_depends => undef,
		size => undef,
		md5sum => undef,
		sha1sum => undef,
		sha256sum => undef,
		short_description => undef,
		long_description => undef,
		homepage => undef,
		tags => undef,
	};
	# parsing fields
	my $ref_arg = shift;
	my $ref_lines = $ref_arg->[0];
	my $base_uri = $ref_arg->[1];
	my $ref_release_info = $ref_arg->[2];

	$self->{avail_as}->[0]->{base_uri} = $base_uri;
	$self->{avail_as}->[0]->{release} = $ref_release_info;

	my $field_name = undef;
	eval {
		foreach my $line (@$ref_lines) {
			if ($line =~ m/^( |\t)/) { # TODO: remove this bogus '\t' after libobject-declare-perl is fixed
				# part of long description
				$self->{long_description} .= "$line\n";
			} else {
				(($field_name, my $field_value) = ($line =~ m/^((?:\w|-)+?): (.*)$/))
					or mydie("cannot parse line '%s'", $line);

				given ($field_name) {
					when ('Priority') { $self->{priority} = $field_value }
					when ('Section') { $self->{section} = $field_value }
					when ('Installed-Size') { $self->{installed_size} = $field_value }
					when ('Maintainer') { $self->{maintainer} = $field_value }
					when ('Source') { $self->{source_name} = $field_value }
					when ('Architecture') { $self->{architecture} = $field_value }
					when ('Version') { $self->{version} = $field_value }
					when ('Depends') { $self->{depends} = __parse_relation_line($field_value) }
					when ('Recommends') { $self->{recommends} = __parse_relation_line($field_value) }
					when ('Suggests') { $self->{suggests} = __parse_relation_line($field_value) }
					when ('Pre-Depends') { $self->{pre_depends} = __parse_relation_line($field_value) }
					when ('Enhances') { $self->{enhances} = __parse_relation_line($field_value) }
					when ('Breaks') { $self->{breaks} = __parse_relation_line($field_value) }
					when ('Provides') { $self->{provides} = __parse_relation_line($field_value) }
					when ('Conflicts') { $self->{conflicts} = __parse_relation_line($field_value) }
					when ('Filename') { $self->{avail_as}->[0]->{filename} = $field_value }
					when ('Size') { $self->{size} = $field_value }
					when ('MD5sum') { $self->{md5sum} = $field_value }
					when ('SHA1') { $self->{sha1sum} = $field_value }
					when ('SHA256') { $self->{sha256sum} = $field_value }
					when ('Description') { $self->{short_description} = $field_value }
					when ('Homepage') { $self->{homepage} = $field_value }
					when ('Tag') { $self->{tags} = $field_value }
					# default { mydie("unexpected field '%s'", $field_name) }
				}
				undef $field_name;
			}
		}
	};
	if (mycatch()) {
		if (defined($field_name)) {
			myerr("error while parsing field '%s'", $field_name);
		}
		myredie();
	}
	return bless $self => $class;
}

sub is_hashes_equal {
	my $self = shift;
	my $other = shift;
	return ($self->{md5sum} eq $other->{md5sum} &&
			$self->{sha1sum} eq $other->{sha1sum} &&
			$self->{sha256sum} eq $other->{sha256sum});
}

sub uris {
	my $self = shift;
	map { $_->{base_uri} . '/dists/' . $_->{filename} } @{$self->{avail_as}};
}

1;

package Cupt::Cache::Pkg;

use constant {
	_VERSIONS => 0,
	_UNPARSED_VERSIONS => 1,
};

import Cupt::Core;

sub new {
	my $class = shift;
	my $self = [
		[], # _versions
		[], # _unparsed_versions
	];
	return bless $self => $class;
}

# adds unparsed entry to package
sub add_entry {
	my $self = shift;
	my $delay_parsing = shift;
	if ($delay_parsing) {
		push @{$self->[_UNPARSED_VERSIONS]}, \@_;
	} else {
		eval {
			$self->_parse_and_merge_version(\@_);
		};
		if (mycatch()) {
			myerr("error while parsing package info");
			myredie();
		}
	}
}

# returns reference to versions array
sub versions {
	my $self = shift;

	# in case parsing of versions of this package was delayed, we parse them now (on-demand)
	eval {
		foreach (@{$self->[_UNPARSED_VERSIONS]}) {
			$self->_parse_and_merge_version($_);
		}
	};
	if (mycatch()) {
		myerr("error while parsing package info on demand (if your want to disable parsing on-demand to get this error earlier, set option 'cupt::delayed-index-parsing' to 0, but doing that will slow down cache initialization)");
		myredie();
	};

	return $self->[_VERSIONS];
}

sub _find_version {
	my $self = shift;
	my $lookup_version = shift;

	my $version_string_found = 0;
	foreach my $version (@{$self->[_VERSIONS]})
	{
		return $version if ($version->{version} eq $lookup_version);
	}
	return undef;
}

sub find_version {
	my $self = shift;
	my $lookup_version = shift;

	my $version_string_found = 0;
	foreach my $version (@{$self->versions()})
	{
		return $version if ($version->{version} eq $lookup_version);
	}
	return undef;
}

sub _parse_and_merge_version {
	# parsing
	my $self = shift;
	my $entry = shift;
	my $parsed_version;
	eval {
		$parsed_version = $self->_construct_version($entry);
	};
	if (mycatch()) {
		myerr("error while parsing new version entry");
		myredie();
	}

	# merging
	eval {
		my $found_version = $self->_find_version($parsed_version->{version});
		if (!defined($found_version)) {
			# no such version before, just add it
			push @{$self->[_VERSIONS]}, $parsed_version;
		} else {
			# there is such version string

			# checking hash sums
			if (is_hashes_equal($found_version, $parsed_version))
			{
				# ok, this is the same entry; looking maybe it defines new uri for package?
				my $uri_from_parsed_version = $parsed_version->{uris}->[0];
				if (!(grep $_ eq $uri_from_parsed_version, @$found_version->{uris})) {
					# yes, it defines, so adding it
					push @{$found_version->{uris}}, $uri_from_parsed_version;
				}
			} else {
				# err, no, this is different package :(
				# just skip it for now
			}
		}
	};
	if (mycatch()) {
		myerr("error while merging version '%s'", $parsed_version->{version});
		myredie();
	};
}

1;

package Cupt::Cache::SourcePkg;

use base qw(Cupt::Cache::Pkg);

sub _construct_version {
	my $entry = shift;
	return new Cupt::Cache::SourcePkg::Version($entry);
}

1;

package Cupt::Cache::BinaryPkg;

use base qw(Cupt::Cache::Pkg);

sub _construct_version {
	shift; # $self skipped
	my $entry = shift;
	return new Cupt::Cache::BinaryPkg::Version($entry);
}

1;

package Cupt::Cache;

import Cupt::Core;
use fields qw(source_packages binary_packages config);

sub new {
	my $class = shift;
	my $self = fields::new($class);
	$self->{config} = shift;
	my $ref_index_entries;
	eval {
		$ref_index_entries = $self->_parse_sources_lists();
	};
	if (mycatch()) {
		myerr("error while parsing sources list");
		myredie();
	}

	# determining which parts of cache we wish to build
	my %build_config = (
		-source => 1,
		-binary => 1,
		@_ # applying passed parameters
	);

	my @index_files_to_parse = map { $self->_path_of_source_list($_) } @$ref_index_entries;
	foreach my $idx (0 .. $#index_files_to_parse) {
		my $source_type = $ref_index_entries->[$idx]{'type'};
		# don't parse unneeded indexes
		if (($source_type eq 'deb' && $build_config{'-binary'}) ||
			($source_type eq 'deb-src' && $build_config{'-source'}))
		{
			eval {
				$self->_process_index_file($index_files_to_parse[$idx], $source_type);
			};
			if (mycatch()) {
				mywarn("skipped index file '%s'", $index_files_to_parse[$idx]);
			}
		}
	}
	return $self;
}

sub _get_release_info {
	my $self = shift;
	my $file = shift;

	my %release_info;

	open(RELEASE, '<', $file) or mydie("unable to open release file '%s'", $file);
	my $field_name = undef;
	eval {
		while (<RELEASE>) {
			(($field_name, my $field_value) = ($_ =~ m/^((?:\w|-)+?): (.*)$/))
				or mydie("cannot parse line '%s'", $_);

			given ($field_name) {
				when ('Origin') { $release_info{vendor} = $field_value }
				when ('Label') { $release_info{label} = $field_value }
				when ('Suite') { $release_info{archive} = $field_value }
				when ('Codename') { $release_info{codename} = $field_value }
				when ('Date') { $release_info{date} = $field_value }
				when ('Valid-Until') { $release_info{valid_until} = $field_value }
				when ('Architectures') { $release_info{architectures} = [ split / /, $field_value ] }
				when ('Description') {
					if ($field_value =~ m/^Debian ([0-9a-z._-]+)/) {
						$release_info{version} = $1;
					}
				}
			}
			$release_info{version} //= "";

			undef $field_name;
		}
	};
	if (mycatch()) {
		myerr("error parsing release file '%s', line '%d'", $file, $.);
		myredie();
	}

	close(RELEASE) or mydie("unable to close index file '%s'", $file);
}

sub _parse_sources_lists {
	my $self = shift;
	my $root_prefix = $self->{config}->var('dir');
	my $etc_dir = $self->{config}->var('dir::etc');

	my $parts_dir = $self->{config}->var('dir::etc::sourceparts');
	my @source_files = glob("$root_prefix$etc_dir/$parts_dir/*");

	my $main_file = $self->{config}->var('dir::etc::sourcelist');
	push @source_files, "$root_prefix$etc_dir/$main_file";

	my @result;
	foreach (@source_files) {
		push @result, __parse_source_list($_);
	}

	return \@result;
}

sub __parse_source_list {
	my $file = shift;
	my @result;
	open(HFILE, '<', "$file") or mydie("unable to open file %s: %s", $file, $!);
	while (<HFILE>) {
		chomp;
		# skip all empty lines and lines with comments
		next if m/^\s*(#.*)?$/;

		my %entry;
		($entry{'type'}, $entry{'uri'}, $entry{'distribution'}, my @sections) = split / +/;
		#print %entry;

		mydie("incorrent source line at file %s, line %d", $file, $.) if (!scalar @sections);
		mydie("incorrent source type at file %s, line %d", $file, $.)
			if ($entry{'type'} ne 'deb' && $entry{'type'} ne 'deb-src');

		map { $entry{'section'} = $_; push @result, { %entry }; } @sections;
	}
	close(HFILE) or mydie("unable to close file %s: %s", $file, $!);
	return @result;
}

sub _process_index_file {
	my $self = shift;
	my $file = shift;
	my $type = shift;

	my $base_uri = 'fakeuri://fake.org';
	my %release_info;

	my $package_class_constructor;
	my $packages_storage;
	if ($type eq 'deb') {
		$package_class_constructor = sub { return new Cupt::Cache::BinaryPkg() };
		$packages_storage = \$self->{binary_packages};
	} elsif ($type eq 'deb-src') {
		$package_class_constructor = sub { return new Cupt::Cache::SourcePkg() };
		$packages_storage = \$self->{source_packages};
		mywarn("not parsing deb-src index '%s' (parsing code is broken now)", $file);
		return;
	}

	open(INDEX, '<', $file) or mydie("unable to open index file '%s'", $file);

	my @accumulated;
	my $is_parsing_delayed = $self->{config}->var('cupt::delayed-index-parsing');
	eval {
		while (<INDEX>) {
			chomp;
			if ($_ eq "") {
				scalar @accumulated or mydie("unexpected end of package entry");

				my $first_line = shift @accumulated;
				if ($first_line =~ m/^Package: (.*)$/) {
					# this is new package name
					my $current_package_name = $1;

					# check it for correctness
					($current_package_name =~ m/^[a-z0-9.+-]+$/)
						or mydie("bad package name '%s'", $current_package_name);

					# end of entry, so adding accumulated info
					$$packages_storage->{$current_package_name} //= $package_class_constructor->();
					$$packages_storage->{$current_package_name}->add_entry
							($is_parsing_delayed, [ @accumulated ], $base_uri, \%release_info);
					@accumulated = ();
				} else {
					mydie("expected 'Package' line, but haven't got it");
				}
			} else {
				# this is some line in entry
				push @accumulated, $_;
			}
		}
	};
	if (mycatch()) {
		myerr("error parsing index file '%s', line '%d'", $file, $.);
		myredie();
	}

	close(INDEX) or mydie("unable to close index file '%s'", $file);
}

sub _path_of_base_uri {
	my $self = shift;
	my $entry = shift;

	# "http://ftp.ua.debian.org" -> "ftp.ua.debian.org"
	(my $uri_prefix = $entry->{'uri'}) =~ s[^\w+://][];

	# "ftp.ua.debian.org/debian" -> "ftp.ua.debian.org_debian"
	$uri_prefix =~ tr[/][_];

	my $dirname = join('',
		$self->{config}->var('dir'),
		$self->{config}->var('dir::state'),
		'/',
		$self->{config}->var('dir::state::lists')
	);

	my $base_uri_part = join('_',
		$uri_prefix,
		'dists',
		$entry->{'distribution'}
	);

	return join('', $dirname, '/', $base_uri_part);
}

sub _path_of_source_list {
	my $self = shift;
	my $entry = shift;

	my $arch = $self->{config}->var('apt::architecture');
	my $suffix = ($entry->{'type'} eq 'deb') ? "binary-${arch}_Packages" : 'source_Sources';

	my $filename = join('_', $self->_path_of_base_uri($entry), $entry->{'section'}, $suffix);

	return $filename;
}

sub __path_of_release_list {
	my $self = shift;
	my $entry = shift;

	my $filename = join('_', $self->_path_of_base_uri($entry), 'Release');

	return $filename;
}

package main;

use Getopt::Long;
use Locale::gettext;

import Cupt::Core;
import Cupt::Config;
import Cupt::Cache;
import Cupt::Cache::Relation qw(stringify_relations);

my $config;
my $cache;

# build config at start
eval {
	$config = new Cupt::Config;
};
if (mycatch()) {
	myerr("error while loading config");
	exit 1;
}

# disable delayed parsing for testing purposes
# $config->set_regular_var('cupt::delayed-index-parsing', 0);

# strip options out (for now)
GetOptions();

my $command = shift @ARGV;

myerr("no command specified") and exit 2 if (!defined($command));

my %command_handlers = (
	'config-dump' => \&config_dump,
	'show' => \&show_package_versions,
);

if (defined($command_handlers{$command})) {
	$command_handlers{$command}->();
} else {
	myerr("unrecognized command") and exit 2;
}

sub build_cache {
	eval {
		# propagate any parameters passed to Cupt::Cache::&new
		$cache = new Cupt::Cache($config, @_);
	};
	if (mycatch()) {
		myerr("error while creating package cache");
		exit 1;
	}
}

sub config_dump {
	my $print_key_value = sub {
		my $key = shift;
		my $value = shift;
		print $key, ' ', "\"", $value, "\"\n";
	};

	my @regular_keys = sort keys %{$config->{regular_vars}};
	foreach my $key (@regular_keys) {
		$print_key_value->($key, $config->{regular_vars}->{$key});
	}

	my @list_keys = sort keys %{$config->{list_vars}};
	foreach my $key (@list_keys) {
		my @values = @{$config->{list_vars}->{$key}};
		foreach (@values) {
			$print_key_value->("${key}::", $_);
		}
	}
}

sub show_package_versions {
	# we need to build binary-only cache for this operation
	build_cache(-source => 0, -binary => 1);

	my @package_names = @ARGV;
	foreach my $package_name (@package_names) {
		my $ref_package = exists $cache->{binary_packages}->{$package_name} ?
			$cache->{binary_packages}->{$package_name} : undef;

		if (!defined($ref_package)) {
			mywarn("know nothing about package '%s', skipped", $package_name);
			next;
		}

		my $ref_versions = $ref_package->versions();

		my $p = sub { print gettext(shift), ': ', shift, "\n" };
		foreach my $version (@$ref_versions) {
			$p->('Package', $package_name);
			$p->('Priority', $version->{priority});
			$p->('Section', $version->{section});
			$p->('Installed-Size', $version->{installed_size});
			$p->('Maintainer', $version->{maintainer});
			$p->('Architecture', $version->{architecture});
			$p->('Version', $version->{version});
			$p->('Depends', stringify_relations($version->{depends})) if defined($version->{depends});
			$p->('Recommends', stringify_relations($version->{recommends})) if defined($version->{recommends});
			$p->('Suggests', stringify_relations($version->{suggests})) if defined($version->{suggests});
			$p->('Conflicts', stringify_relations($version->{conflicts})) if defined($version->{conflicts});
			$p->('Provides', stringify_relations($version->{provides})) if defined($version->{provides});
			$p->('Enhances', stringify_relations($version->{enhances})) if defined($version->{enhances});
			foreach ($version->uris()) {
				$p->('URI', $_);
			}
			$p->('Size', $version->{size});
			$p->('MD5', $version->{md5sum});
			$p->('SHA1', $version->{sha1sum});
			$p->('SHA256', $version->{sha256sum});
			$p->('Description', $version->{short_description});
			# TODO: translated descriptions...
			print $version->{long_description};
			$p->('Homepage', $version->{homepage}) if defined($version->{homepage});
			$p->('Tag', $version->{tags}) if defined($version->{tags});
			print "\n";
		}
	}
}

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2008 Eugene V. Lyubimkin
Copyright (c) 2005 Matt Dainty.
Copyright (c) 2008 David Golden

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

